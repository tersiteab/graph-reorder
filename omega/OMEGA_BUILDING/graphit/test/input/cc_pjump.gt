element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex,Vertex) = load ("../test/graphs/4.el");

const vertices : vertexset{Vertex} = edges.getVertices();
const IDs : vector{Vertex}(int) = 1;

const update: vector[1](int);

func updateEdge(src : Vertex, dst : Vertex)
    if IDs[dst] != IDs[src]
      IDs[dst] min= IDs[src];
    end
end

func init(v : Vertex)
     IDs[v] = v;
end

func pjump(v: Vertex)
    var y: Vertex = IDs[v];
    var x: Vertex = IDs[y];
    if x != y
        IDs[v] = x;
        update[0] = 1;
    end
end


func printID(v : Vertex)
    print IDs[v];
end



func main()
    var n : int = edges.getVertices();
    for trail in 0:10
         var frontier : vertexset{Vertex} = new vertexset{Vertex}(n);
%        startTimer();
         vertices.apply(init);
         while (frontier.getVertexSetSize() != 0)
            #s1# var output: vertexset{Vertex} = edges.applyModified(updateEdge,IDs);
	        delete frontier;
	        frontier = output;
            update[0] = 1;
            while update[0] != 0
		       update[0] = 0;
		       vertices.apply(pjump);
            end
        end
%        var elapsed_time : float = stopTimer();
	     delete frontier;
	     #s2# vertices.apply(printID);
%        print "elapsed time: ";
%        print elapsed_time;
    end
end