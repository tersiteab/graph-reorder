element Vertex end
element Edge end

% const edges : edgeset{Edge}(Vertex,Vertex, int) = load ("../test/graphs/test.wel");
const edges : edgeset{Edge}(Vertex,Vertex, int) = load ("../test/graphs/4.wel");


const vertices : vertexset{Vertex} = edges.getVertices();

const SP : vector{Vertex}(int) = 2147483647; %should be INT_MAX

func updateEdge(src : Vertex, dst : Vertex, weight : int)
     SP[dst] min= (SP[src] + weight);
end

func printSP(v : Vertex)
    print SP[v];
end

func main()

    startTimer();
    var n : int = edges.getVertices();
    % print "number of vertices ";
    % print n;
    var frontier : vertexset{Vertex} = new vertexset{Vertex}(0);

    frontier.addVertex(0); %add source vertex
    SP[0] = 0;

    var rounds : int = 0;
    while (frontier.getVertexSetSize() != 0)
        #s1# var output : vertexset{Vertex} = edges.from(frontier).applyModified(updateEdge,SP);
        delete frontier;
        frontier = output;
	    rounds = rounds + 1;
    	if rounds == n
	        print "negative cycle";
	        break;
	    end
    end
    delete frontier;

    #s2# vertices.apply(printSP);

    % print rounds;
    % var elapsed_time : float = stopTimer();
    % print "elapsed time: ";
    % print elapsed_time;

end
