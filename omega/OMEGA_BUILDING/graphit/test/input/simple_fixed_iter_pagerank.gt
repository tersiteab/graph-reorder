element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex,Vertex) = load ("../test/graphs/test.el");
const vertices : vertexset{Vertex} = edges.getVertices();

const old_rank : vector{Vertex}(float) = 1.0/vertices.size();
const new_rank : vector{Vertex}(float) = 0.0;
const out_degree : vector {Vertex}(int) = edges.getOutDegrees();
const error : vector{Vertex}(float) = 0.0;

const damp : float = 0.85;
const beta_score : float = (1.0 - damp) / vertices.size();

func updateEdge(src : Vertex, dst : Vertex)
    new_rank[dst] += old_rank[src] / out_degree[src];
end

func updateVertex(v : Vertex)
    var old_score : float = old_rank[v];
    new_rank[v] = beta_score + damp*(new_rank[v]);
    error[v] = fabs(new_rank[v] - old_rank[v]);
    old_rank[v] = new_rank[v];
    new_rank[v] = 0.0;
end


func main()

    startTimer();

    for i in 1:10
        edges.apply(updateEdge);
        vertices.apply(updateVertex);
    end

    var sum : float = 0;
    for i in 0:edges.getVertices()
        sum += error[i];
    end
    print sum;

    var elapsed_time : float = stopTimer();
    print "elapsed time: ";
    print elapsed_time;

end