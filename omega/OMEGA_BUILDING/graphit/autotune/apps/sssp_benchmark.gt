element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex,Vertex, int) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const SP : vector{Vertex}(int) = 2147483647; %should be INT_MAX

func updateEdge(src : Vertex, dst : Vertex, weight : int)
     SP[dst] min= (SP[src] + weight);
end

func reset(v: Vertex)
    SP[v] = 2147483647;
end

func main()
    for trail in 0:5
        startTimer();
        vertices.apply(reset);
        var n : int = edges.getVertices();
        var frontier : vertexset{Vertex} = new vertexset{Vertex}(0);
        frontier.addVertex(14); %add source vertex
        SP[14] = 14;

        var rounds : int = 0;
        while (frontier.getVertexSetSize() != 0)
            #s1# frontier = edges.from(frontier).applyModified(updateEdge, SP);
	        rounds = rounds + 1;
    	    if rounds == n
	            print "negative cycle";
	            break;
	    end
        end
        var elapsed_time : float = stopTimer();
        print "elapsed time: ";
        print elapsed_time;
        print "rounds";
        print rounds;
    end
end

